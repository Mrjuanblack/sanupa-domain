"use strict";
// export interface CustomerSupport {
//     childOrderId: number
//     userId: number
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerSupportEntity = exports.isAnswerAllowedByRole = exports.CustomerSupportTypeList = exports.CustomerSupportAnswer = exports.CustomerSupportType = void 0;
exports.getCustomerSupportTypeString = getCustomerSupportTypeString;
const User_1 = require("./User");
//     text: string
//     img: string | null
// }
// export class CustomerSupportEntity implements CustomerSupport {
//     constructor(
//         public childOrderId: number,
//         public userId: number,
//         public text: string,
//         public img: string | null
//     ) { }
// }
// export interface NewCustomerSupport {
//     childOrderId: number
//     text: string
// }
// export class NewCustomerSupportEntity implements NewCustomerSupport {
//     constructor(
//         public childOrderId: number,
//         public text: string
//     ) { }
// }
var CustomerSupportType;
(function (CustomerSupportType) {
    CustomerSupportType[CustomerSupportType["Partner_UnableToSendOnTime"] = 1] = "Partner_UnableToSendOnTime";
    CustomerSupportType[CustomerSupportType["Partner_NoStock"] = 2] = "Partner_NoStock";
})(CustomerSupportType || (exports.CustomerSupportType = CustomerSupportType = {}));
var CustomerSupportAnswer;
(function (CustomerSupportAnswer) {
    // Answers for Partner_UnableToSendOnTime
    CustomerSupportAnswer[CustomerSupportAnswer["Partner_UnableToSendOnTime_Reprogram"] = 1] = "Partner_UnableToSendOnTime_Reprogram";
    CustomerSupportAnswer[CustomerSupportAnswer["Partner_UnableToSendOnTime_Cancel"] = 2] = "Partner_UnableToSendOnTime_Cancel";
    // Answers for Partner_NoStock
    CustomerSupportAnswer[CustomerSupportAnswer["Partner_NoStock_SendAnyway"] = 3] = "Partner_NoStock_SendAnyway";
    CustomerSupportAnswer[CustomerSupportAnswer["Partner_NoStock_Cancel"] = 4] = "Partner_NoStock_Cancel";
})(CustomerSupportAnswer || (exports.CustomerSupportAnswer = CustomerSupportAnswer = {}));
exports.CustomerSupportTypeList = Object.values(CustomerSupportType).filter(value => typeof value === 'number');
function getCustomerSupportTypeString(customerSupportType) {
    switch (customerSupportType) {
        case CustomerSupportType.Partner_UnableToSendOnTime:
            return "No se puede enviar a tiempo";
        case CustomerSupportType.Partner_NoStock:
            return "No hay stock";
    }
}
const isAnswerAllowedByRole = (role, answer) => {
    switch (answer) {
        // Answers that a customer can give to a PQR generated by a partner
        case CustomerSupportAnswer.Partner_UnableToSendOnTime_Reprogram:
        case CustomerSupportAnswer.Partner_UnableToSendOnTime_Cancel:
        case CustomerSupportAnswer.Partner_NoStock_SendAnyway:
        case CustomerSupportAnswer.Partner_NoStock_Cancel:
            return [User_1.UserRole.User, User_1.UserRole.Partner].includes(role);
    }
};
exports.isAnswerAllowedByRole = isAnswerAllowedByRole;
class CustomerSupportEntity {
    constructor(childOrderId, partnerId, type, answer) {
        this.childOrderId = childOrderId;
        this.partnerId = partnerId;
        this.type = type;
        this.answer = answer;
    }
}
exports.CustomerSupportEntity = CustomerSupportEntity;
