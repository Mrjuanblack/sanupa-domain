// export interface CustomerSupport {
//     childOrderId: number
//     userId: number

import { UserRole } from "./User";

//     text: string
//     img: string | null
// }

// export class CustomerSupportEntity implements CustomerSupport {
//     constructor(
//         public childOrderId: number,
//         public userId: number,
//         public text: string,
//         public img: string | null
//     ) { }
// }

// export interface NewCustomerSupport {
//     childOrderId: number

//     text: string
// }

// export class NewCustomerSupportEntity implements NewCustomerSupport {
//     constructor(
//         public childOrderId: number,
//         public text: string
//     ) { }
// }
export enum CustomerSupportType {
    Partner_UnableToSendOnTime = 1,
    Partner_NoStock = 2
}
export enum CustomerSupportAnswer {
    // Answers for Partner_UnableToSendOnTime
    Partner_UnableToSendOnTime_Reprogram = 1,
    Partner_UnableToSendOnTime_Cancel = 2,
    // Answers for Partner_NoStock
    Partner_NoStock_SendAnyway = 3,
    Partner_NoStock_Cancel = 4,
}
export const CustomerSupportTypeList = Object.values(CustomerSupportType).filter(value => typeof value === 'number');
export function getCustomerSupportTypeString(customerSupportType: CustomerSupportType): string {
    switch (customerSupportType) {
        case CustomerSupportType.Partner_UnableToSendOnTime:
            return "No se puede enviar a tiempo"
        case CustomerSupportType.Partner_NoStock:
            return "No hay stock"
    }
}
export const isAnswerAllowedByRole = (role: UserRole, answer: CustomerSupportAnswer): boolean => {
    switch (answer) {
        // Answers that a customer can give to a PQR generated by a partner
        case CustomerSupportAnswer.Partner_UnableToSendOnTime_Reprogram:
        case CustomerSupportAnswer.Partner_UnableToSendOnTime_Cancel:
        case CustomerSupportAnswer.Partner_NoStock_SendAnyway:
        case CustomerSupportAnswer.Partner_NoStock_Cancel:
            return [UserRole.User, UserRole.Partner].includes(role)
    }
}
export interface CustomerSupport {
    childOrderId: number
    type: CustomerSupportType
    answer: CustomerSupportAnswer | null
}
export class CustomerSupportEntity implements CustomerSupport {
    constructor(
        public childOrderId: number,
        public type: CustomerSupportType,
        public answer: CustomerSupportAnswer | null
    ) { }
}
export interface NewCustomerSupport {
    childOrderId: number
    type: CustomerSupportType
}